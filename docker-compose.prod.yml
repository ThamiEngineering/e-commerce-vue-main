services:
  # Service MongoDB
  mongodb:
    image: mongo:4.4
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-example}
      MONGO_INITDB_DATABASE: ecommerce
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Vue.js avec Nginx
  frontend:
    image: ${REGISTRY_URL:-localhost:5001}/frontend:${IMAGE_TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    depends_on:
      - product-service
      - auth-service
      - order-service
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Auth Service
  auth-service:
    image: ${REGISTRY_URL:-localhost:5001}/auth-service:${IMAGE_TAG:-latest}
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://root:example@mongodb:27017/auth?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-efrei_super_pass}
    networks:
      - app-network
    depends_on:
      - mongodb
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Product Service
  product-service:
    image: ${REGISTRY_URL:-localhost:5001}/product-service:${IMAGE_TAG:-latest}
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://root:example@mongodb:27017/ecommerce?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-efrei_super_pass}
    networks:
      - app-network
    depends_on:
      - mongodb
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Order Service
  order-service:
    image: ${REGISTRY_URL:-localhost:5001}/order-service:${IMAGE_TAG:-latest}
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=mongodb://root:example@mongodb:27017/orders?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-efrei_super_pass}
      - VITE_PRODUCT_SERVICE_URL=http://product-service:3000
    networks:
      - app-network
    depends_on:
      - mongodb
      - product-service
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: overlay

volumes:
  mongodb_data: